from conans import ConanFile, CMake
import os

# class OpenTDFLibConan(ConanFile):
#     generators = "cmake"
#     settings = "os", "compiler", "build_type", "arch"

#     # manylinux build of boost without libiconv fails because glibc is too old.  Default settings uses prebuilt binaries and works.  
#     # Disable these options until that can be resolved
#     default_options = ("NOTopentdf-client:without_libiconv=True", "NOTopentdf-client:without_zlib=True")

#     def requirements(self):
#         self.requires("pybind11/2.6.2@")
#         self.requires("opentdf-client/1.3.2@")

#     def build(self):
#         cmake = CMake(self)
#         cmake.configure()
#         cmake.build()
            
#     def imports(self):
#         self.copy("*.h", dst="../opentdf-cpp/include/", src="include")
#         self.copy("*.**", dst="../opentdf-cpp/lib", src="lib")

class OpenTDFLibConan(ConanFile):
    settings = "os", "compiler", "build_type", "arch"
    options = {"fPIC": [True, False]}
    default_options = {"fPIC": True}

    def configure(self):
        self.options["libxml2"].iconv = False
        self.options["libxml2"].icu = False
        self.options["boost"].i18n_backend_iconv = False
        self.options["boost"].i18n_backend_icu = False
        self.options["boost"].xxxx    = True
        self.options["boost"].without_log = True
        if str(self.settings.arch).startswith('arm'):
            self.options["openssl"].no_asm = True
            self.options["libxml2"].lzma = False
            self.options["libxml2"].zlib = False

    def requirements(self):
        self.requires("openssl/1.1.1q")
        self.requires("boost/1.79.0")
        self.requires("ms-gsl/2.1.0")
        self.requires("libxml2/2.9.10")
        self.requires("nlohmann_json/3.11.1")
        self.requires("jwt-cpp/0.4.0")
        self.requires("zlib/1.2.12")
        self.requires("opentdf-client/1.3.2@")

    def config_options(self):

        if self.settings.os == "Windows":
            del self.options.fPIC

    def imports(self):
        self.copy("*.h", dst="../opentdf-cpp/include/", src="include")
        self.copy("*.**", dst="../opentdf-cpp/lib", src="lib")