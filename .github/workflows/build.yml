name: Run build
on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
  schedule:
    - cron: "0 7 * * 1,3,5"
  workflow_dispatch:
env:
  VBUILD_UNIT_TESTS: false
  VCONAN_VER: 1.59.0
  # Would be nice if this value was set automagically when client-cpp is released and consumed everywhere
  VCLIENT_CPP_VER: 1.5.0
  VCONAN_BRANCH_VERSION: "True"
  # recipe should usually pull from 'main' but can be changed to a branch name if recipe changes are pending
  VCONAN_RECIPE_VER: main
jobs:
  run-build-mac:
    runs-on: macos-11

    strategy:
      matrix:
        python-version: [ '3.11' ]

    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
            python-version: ${{ matrix.python-version }}

      - name: Install Conan
        run: pip3 install conan==${{ env.VCONAN_VER }} --force

      - name: Check out client-cpp code
        uses: actions/checkout@v3
        with:
          repository: opentdf/client-conan
          ref: ${{ env.VCONAN_RECIPE_VER }}
          path: client-conan
      - name: Get client-cpp into conan local cache, built from repo if necessary
        run: |
          cd ${{ github.workspace }}
          cd client-conan
          conan create recipe/all opentdf-client/${{ env.VCLIENT_CPP_VER }}@ -pr:b=default --build=opentdf-client --build=missing -o opentdf-client:branch_version=${{ env.VCONAN_BRANCH_VERSION }}
      - name: Run build
        env:
          CIBW_ARCHS_MACOS: x86_64 arm64
        run: |
          cd ${{ github.workspace }}
          ./build-all.sh
      - name: Upload MacOS wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheel-macos
          path: src/python-bindings/pips/wheelhouse/*.whl

      - run: echo "üçè This job's status is ${{ job.status }}."

  run-build-windows:
    runs-on: windows-2019
    env:
      VBUILDRELEASE: Release
      VBUILDDEBUG: Debug
      VBUILDMODE: Release

    strategy:
      matrix:
        python-version: [ '3.8', '3.9', '3.10', '3.11' ]

    steps:
      - run: echo "üéâ The job was automatically triggered by a %github.event_name% event."
      - run: echo "üêß This job is now running on a %runner.os% server hosted by GitHub!"
      - run: echo "üîé The name of your branch is %github.ref% and your repository is %github.repository%."

      - name: Check out repository code
        uses: actions/checkout@v3
      - run: echo "üí° The %github.repository% repository has been cloned to the runner."

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Conan
        run: pip3 install conan==${{ env.VCONAN_VER }} --force

      - name: Check out client-cpp code
        uses: actions/checkout@v3
        with:
          repository: opentdf/client-conan
          ref: ${{ env.VCONAN_RECIPE_VER }}
          path: client-conan

      - name: Get client-cpp into conan local cache, built from repo if necessary
        run: |
          cd ${{ github.workspace }}
          cd client-conan
          conan create recipe/all opentdf-client/${{ env.VCLIENT_CPP_VER }}@ -pr:b=default --build=opentdf-client --build=missing -o opentdf-client:branch_version=${{ env.VCONAN_BRANCH_VERSION }}

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      - name: Run build
        run: |
          cd ${{ github.workspace }}
          .\build-all.bat

      - name: Upload Windows wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheel-windows
          path: src/python-bindings/pips/dist/*.whl

  run-build-manylinux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: ./docker/manylinux/deploy.sh

      - name: Upload Manylinux AMD64 wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheel-manylinux-amd64
          path: src/python-bindings/pips/dist/*.whl

  run-build-manylinux-aarch64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Build
        run: ./docker/manylinux_aarch64/deploy.sh

      - name: Upload Manylinux ARM64 wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheel-manylinux-arm64
          path: src/python-bindings/pips/dist/*.whl

  test-with-quickstart:
    needs: run-build-manylinux
    runs-on: ubuntu-latest
    timeout-minutes: 75
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      - name: Check out repository code
        uses: actions/checkout@v3
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."

      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Download wheel-manylinux-amd64 artifact
        uses: actions/download-artifact@v3
        with:
          name: wheel-manylinux-amd64
          path: dist
      
      - run: pip install --no-index --find-links=dist/ opentdf

      - name: Git clone opentdf 
        run: |
          git clone --depth 1 https://github.com/opentdf/opentdf.git

      - uses: yokawasa/action-setup-kube-tools@v0.9.2
        with:
          setup-tools: |
            kubectl
            helm
            tilt
          # This should be in sync with the minikube-deployed kube version below
          kubectl: "1.24.1"
          helm: "3.9.1"
          tilt: "0.30.4"

      - run: |
          kubectl version --client
          kustomize version
          tilt version

      - name: start minikube
        id: minikube
        uses: medyagh/setup-minikube@master
        with:
          minikube-version: 1.26.0
          # This should be in sync with the setup-tools version above
          kubernetes-version: 1.24.1

      - name: Run tilt & run sanity test
        env:
          # This test script is passed to opentdf/quickstart tilt file
          TEST_SCRIPT: ../../wait-and-test.sh
        run: |-
          kubectl version
          pwd
          cd opentdf/quickstart
          pwd
          tilt ci

      


  upload_to_pypi:
    needs: [ run-build-mac, run-build-windows, run-build-manylinux, run-build-manylinux-aarch64, test-with-quickstart ]
    runs-on: ubuntu-latest
    steps:
      - name: Download wheel-macos artifact
        uses: actions/download-artifact@v3
        with:
          name: wheel-macos
          path: dist
      - name: Download wheel-windows artifact
        uses: actions/download-artifact@v3
        with:
          name: wheel-windows
          path: dist
      - name: Download wheel-manylinux-amd64 artifact
        uses: actions/download-artifact@v3
        with:
          name: wheel-manylinux-amd64
          path: dist
      - name: Download wheel-manylinux-arm64 artifact
        uses: actions/download-artifact@v3
        with:
          name: wheel-manylinux-arm64
          path: dist

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_TOKEN }}
          verbose: true
          skip_existing: true
